#------------------------------------------------------------------------------
# Filename:             Makefile.default
# Module:		gui
# Author:               Tobias Blomberg
# Created:              2000-10-17
# Description:          There should be one copy of this file in
#			each sub-directory. It is here you specify
#			witch files you want to compile and witch
#			libraries/programs you want to create.
#------------------------------------------------------------------------------
# Signatures:
# Sign Name		 Phonenumber	 Email
# TBg  Tobias Blomberg   		 blomman@ludd.luth.se
#
#------------------------------------------------------------------------------

# Include config file
-include $(ROOT)/.config


###############################################################################
#
# This section contains things to setup when compiling PROGRAMS.
#
###############################################################################

ifdef QT_BIN

# Programs to compile
PROGS		= 

# C++ programs to compile
CPPPROGS      	= $(BIN)/qtel

# Sources other than the main files
PRGSRC		= MainWindow.cpp ComDialog.cpp Settings.cpp MsgHandler.cpp \
		  Vox.cpp

# Libraries compiled in the project (in $(LIB)).
PROJLIBS	= -lecholib -lasyncqt -lasyncaudio -lasynccore

# Libraries external to the project
LIBS		= $(QT_LIBS) $(SIGC_LIBS)

# Specify Qt header files here that you want to run the
# Qt Meta Object Compiler on (for programs).
QTHEADERS	= MainWindow.h ComDialog.h MyMessageBox.h Vox.h

# Specify which ui-files to include in the programs we compile.
UI_FILES	= MainWindowBase.ui ComDialogBase.ui SettingsDialog.ui

# Programs to install. You may optionally specify mode, owner and
# group if you want to. The syntax is: filename[mode,owner,group].
#   Example: myprog[750,-,mygroup]
#   Where:   750     = The mode
#            -       = Preserve owner
#            mygroup = Set group mygroup
PROGS_INSTALL	= $(PROGS:%=%[755,root,root]) $(CPPPROGS:%=%[755,root,root])

# Daemons (server processes) to install. Same format as PROGS_INSTALL.
DAEMONS_INSTALL	= 

endif # QT_BIN


###############################################################################
#
# This section contains things to setup when compiling LIBRARIES.
#
###############################################################################

# The name of the library (without the preceeding "lib").
LIBNAME		= 

# The version of the produced shared library
SHLIB_MAJOR	= 
SHLIB_MINOR	= 

# Sources needed to build the library
LIBSRC		= 

# Which libs are used by the DYNAMIC lib generated.
LIB_LIBS	= -lc

# Which STATIC libs should be included in the generated STATIC lib.
# These libs must be in the $(LIB) directory. Only the name of the
# lib should be specified. Ex: If the filename is "libclient.a",
# you should specify "client".
STATIC_LIBS   	= 

# Includefiles to export. A softlink is created in $(INC).
EXPINC		= 

# Specify Qt header files here that you want to run the
# Qt Meta Object Compiler on (for libraries).
LIB_QTHEADERS	= 

# Specify which ui-files to include in the lib we compile.
LIB_UI_FILES	= 

# Include files to install.  You may optionally specify mode, owner and
# group if you want to. The syntax is: filename[mode,owner,group].
#   Example: myinc.h[750,-,mygroup]
#   Where:   750     = The mode
#            -       = Preserve owner
#            mygroup = Set group mygroup
INC_INSTALL	= $(EXPINC:%=%[644,root,root])

# Library to install (just one at the moment).
# You may optionally specify mode, owner and group if you want to.
# The syntax is: filename[mode,owner,group].
#   Example: mylib[750,-,mygroup]
#   Where:   750     = The mode
#            -       = Preserve owner
#            mygroup = Set group mygroup
LIB_INSTALL	= $(LIBNAME:%=%[-,root,root])


###############################################################################
#
# This section contains things to setup when compiling PLUGINS.
#
###############################################################################

# C plugins to compile (No .so extension)
PLUGINS		= 

# C++ plugins to compile (No .so extension)
PLUGINS_CPP   	= 

# Additional C sources to compile.
PLUGINSRC	= 

# Libs that the plugins depend on.
PLUGIN_LIBS	= 

# List the plugins to install (With the .so extension!).
# You may optionally specify mode, owner and group if you want to.
# The syntax is: filename[mode,owner,group].
#   Example: mylib[750,-,mygroup]
#   Where:   750     = The mode
#            -       = Preserve owner
#            mygroup = Set group mygroup
PLUGINS_INSTALL	= $(PLUGINS:%=%.so[755,root,root])


###############################################################################
#
# This section contains extra targets. They should be used as
# a last resort if the existing features can not solve a problem.
# PRE_TARGETS are made _before_ anything else and POST_TARGETS are
# made _after_ everything else.
# On a "make clean", the specified targets are removed.
#
###############################################################################

ifdef QT_BIN

#PRE_TARGETS    = pre.txt
POST_TARGETS   = translations/qtel_tmpl.qm \
	         translations/qtel_sv.qm \
		 translations/qtel_de.qm \
		 translations/qtel_tr.qm \
		 translations/qtel_nl.qm \
		 translations/qtel_it.qm \
		 translations/qtel_uk.qm \
		 translations/qtel_ru.qm \
		 translations/qtel_hu.qm \
		 translations/qtel_ja.qm \
		 translations/qtel_es.qm


translations/qtel_%.qm:  translations/qtel_%.ts
	$(ECHO) --- Creating translation file $(BOLD)$@$(NBOLD)...
	${QT_BIN}/lrelease $<

endif # QT_BIN

#pre.txt:       nisse.txt
#       $(ECHO) --- Creating file $(BOLD)$@$(NBOLD)...
#       echo "Hello, target $@!" > $@

#post.txt:      nisse.txt
#       $(ECHO) --- Creating file $(BOLD)$@$(NBOLD)...
#       echo "Hello, target $@!" > $@



###############################################################################
#
# This section contains the inclusion of the main makefile
# containing all targets. DON'T TOUCH!
#
###############################################################################

# Include main makefile.
include $(ROOT)/makefile.inc


##################################################################
#
# This section contains things to setup when creating RPMs.
#
##################################################################

# The name of the RPM to put the installed files into when doing
# the "rpm" target.
#RPM_NAME := 


###############################################################################
#
# This section contains compiler and linker options.
#
###############################################################################

# Paths to includefile-directories. All directories must be preceeded
# by the "-I" switch.
INCPATH 	+= -I/usr/include/gsm $(SIGC_INCPATH) $(QT_INCPATH)

# Paths to library-directories. All directories must be preceeded
# by the "-L" switch.
LIBPATH 	+= $(QT_LIBPATH) $(SIGC_LIBPATH)

# Additional warnings to use. If you want to override the default
# warnings, change the "+=" to "=".
WARNINGS	+= -Wno-deprecated
CXXWARNINGS	+= -Wno-non-virtual-dtor

# Extra commandline switches to the compiler. For example "-g" to
# add debug information, "-O2" to add optimizations etc.
CFLAGS		+= 
CXXFLAGS	+= $(QT_CFLAGS)

# Extra commandline switches to the linker
LDFLAGS		+= 


##################################################################
#
# This section contains extra make targets
#
##################################################################

# Additional files to install
install-extras uninstall-extras rpm-extras:
ifdef QT_BIN
	$(FILESPEC) translations/qtel_sv.qm[644,root,root] \
	      	    /usr/share/qtel/translations
	$(FILESPEC) translations/qtel_de.qm[644,root,root] \
	      	    /usr/share/qtel/translations
	$(FILESPEC) translations/qtel_tr.qm[644,root,root] \
	      	    /usr/share/qtel/translations
	$(FILESPEC) translations/qtel_nl.qm[644,root,root] \
	      	    /usr/share/qtel/translations
	$(FILESPEC) translations/qtel_uk.qm[644,root,root] \
	      	    /usr/share/qtel/translations
	$(FILESPEC) translations/qtel_ru.qm[644,root,root] \
	      	    /usr/share/qtel/translations
	$(FILESPEC) translations/qtel_hu.qm[644,root,root] \
	      	    /usr/share/qtel/translations
	$(FILESPEC) translations/qtel_es.qm[644,root,root] \
	      	    /usr/share/qtel/translations
	$(FILESPEC) translations/qtel_ja.qm[644,root,root] \
	      	    /usr/share/qtel/translations
	$(FILESPEC) connect.raw[644,root,root] /usr/share/qtel/sounds
	$(FILESPEC) qtel.desktop[644,root,root] /usr/share/applications
	$(FILESPEC) images/link.xpm[644,root,root] /usr/share/icons
endif
#	$(DIRSPEC) /var/spool/myprog[755,root,root]



#
# EOF -- This file has not been truncated.
#

